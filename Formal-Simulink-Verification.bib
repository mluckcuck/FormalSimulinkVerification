
@inproceedings{araiza-illan_formal_2014,
	address = {Loughborough, UK},
	title = {Formal verification of control systems' properties with theorem proving},
	isbn = {978-1-4799-5011-9},
	url = {http://ieeexplore.ieee.org/document/6915147/},
	doi = {10.1109/control.2014.6915147},
	abstract = {This paper presents the deductive formal veriﬁcation of high-level properties of control systems with theorem proving, using the Why3 tool. Properties that can be veriﬁed with this approach include stability, feedback gain, and robustness, among others. For the systems, modelled in Simulink, we propose three main steps to achieve the veriﬁcation: specifying the properties of interest over the signals within the model using Simulink blocks, an automatic translation of the model into Why3, and the automatic veriﬁcation of the properties with theorem provers in Why3. We present a methodology to specify the properties in the model and a library of relevant assertion blocks (logic expressions), currently in development. The functionality of the blocks in the Simulink models are automatically translated to Why3 as ‘theories’ and veriﬁcation goals by our tool implemented in MATLAB. A library of theories in Why3 corresponding to each supported block has been developed to facilitate the process of translation. The goals are automatically veriﬁed in Why3 with relevant theorem provers. A simple ﬁrst-order discrete system is used to exemplify the speciﬁcation of the Simulink model, the translation process from Simulink to the Why3 formal logic language, and the veriﬁcation of Lyapunov stability.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {2014 {UKACC} {International} {Conference} on {Control} ({CONTROL})},
	publisher = {IEEE},
	author = {Araiza-Illan, Dejanira and Eder, Kerstin and Richards, Arthur},
	month = jul,
	year = {2014},
	keywords = {Computer Science - Logic in Computer Science, Electrical Engineering and Systems Science - Systems and Control},
	pages = {244--249},
	annote = {Comment: Accepted to be presented in UKACC, Loughborough, UK, 2014. Final reference to appear on publication},
	file = {Araiza-Illan et al. - 2014 - Formal verification of control systems' properties.pdf:/home/matt/Zotero/storage/FWHXZKXJ/Araiza-Illan et al. - 2014 - Formal verification of control systems' properties.pdf:application/pdf},
}

@inproceedings{herber_bit-precise_2013,
	address = {Montreal, QC, Canada},
	title = {Bit-precise formal verification of discrete-time {MATLAB}/{Simulink} {Models} using {SMT} {Solving}},
	isbn = {978-1-4799-1443-2},
	url = {http://ieeexplore.ieee.org/document/6658586/},
	doi = {10.1109/emsoft.2013.6658586},
	abstract = {Matlab/Simulink is widely used for model-based development of embedded systems. In particular, safety-critical applications are increasingly designed in Matlab/Simulink. At the same time, formal veriﬁcation techniques for Matlab/Simulink are still rare and existing ones do not scale well. In this paper, we present an automatic transformation from discrete-time Matlab/Simulink to the input language of UCLID. UCLID is a toolkit for system veriﬁcation based on SMT solving. Our approach enables us to use a combination of bounded model checking and inductive invariant checking for the automatic veriﬁcation of Matlab/Simulink models. To demonstrate the practical applicability of our approach, we have successfully veriﬁed the absence of one of the most common errors, i. e. variable over- or underﬂow, for an industrial design from the automotive domain.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {2013 {Proceedings} of the {International} {Conference} on {Embedded} {Software} ({EMSOFT})},
	publisher = {IEEE},
	author = {Herber, Paula and Reicherdt, Robert and Bittner, Patrick},
	month = sep,
	year = {2013},
	pages = {1--10},
	file = {Herber et al. - 2013 - Bit-precise formal verification of discrete-time M.pdf:/home/matt/Zotero/storage/JCL3DM7H/Herber et al. - 2013 - Bit-precise formal verification of discrete-time M.pdf:application/pdf},
}


@inproceedings{meenakshi_tool_2006,
	address = {Berlin, Heidelberg},
	title = {Tool for {Translating} {Simulink} {Models} into {Input} {Language} of a {Model} {Checker}},
	volume = {4260},
	isbn = {978-3-540-47460-9 978-3-540-47462-3},
	url = {http://link.springer.com/10.1007/11901433_33},
	abstract = {Model Based Development (MBD) using Mathworks tools like Simulink, Stateﬂow etc. is being pursued in Honeywell for the development of safety critical avionics software. Formal veriﬁcation techniques are well-known to identify design errors of safety critical systems reducing development cost and time. As of now, formal veriﬁcation of Simulink design models is being carried out manually resulting in excessive time consumption during the design phase. We present a tool that automatically translates certain Simulink models into input language of a suitable model checker. Formal veriﬁcation of safety critical avionics components becomes faster and less error prone with this tool. Support is also provided for reverse translation of traces violating requirements (as given by the model checker) into Simulink notation for playback.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Formal {Methods} and {Software} {Engineering}},
	publisher = {Springer Berlin Heidelberg},
	author = {Meenakshi, B. and Bhatnagar, Abhishek and Roy, Sudeepa},
	year = {2006},
	doi = {10.1007/11901433_33},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {606--620},
	file = {Meenakshi et al. - 2006 - Tool for Translating Simulink Models into Input La.pdf:/home/matt/Zotero/storage/EDMAQ8IU/Meenakshi et al. - 2006 - Tool for Translating Simulink Models into Input La.pdf:application/pdf},
}


@incollection{havelund_formal_2018,
	address = {Cham},
	title = {Formal {Verification} of {Automotive} {Simulink} {Controller} {Models}: {Empirical} {Technical} {Challenges}, {Evaluation} and {Recommendations}},
	volume = {10951},
	isbn = {978-3-319-95581-0 978-3-319-95582-7},
	shorttitle = {Formal {Verification} of {Automotive} {Simulink} {Controller} {Models}},
	url = {http://link.springer.com/10.1007/978-3-319-95582-7_23},
	abstract = {The automotive industry makes increasing usage of Simulink-based software development. Typically, automotive Simulink designs are analyzed using non-formal test methods, which do not guarantee the absence of errors. In contrast, formal veriﬁcation techniques aim at providing formal guarantees or counterexamples that the analyzed designs fulﬁll their requirements for all possible inputs and parameters. Therefore, the automotive safety standard ISO 26262 recommends the usage of formal methods in safety-critical software development.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Formal {Methods}},
	publisher = {Springer International Publishing},
	author = {Nellen, Johanna and Rambow, Thomas and Waez, Md Tawhid Bin and Ábrahám, Erika and Katoen, Joost-Pieter},
	editor = {Havelund, Klaus and Peleska, Jan and Roscoe, Bill and de Vink, Erik},
	year = {2018},
	doi = {10.1007/978-3-319-95582-7_23},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {382--398},
	file = {Nellen et al. - 2018 - Formal Verification of Automotive Simulink Control.pdf:/home/matt/Zotero/storage/IWE6LMNP/Nellen et al. - 2018 - Formal Verification of Automotive Simulink Control.pdf:application/pdf},
}

@article{agrawal_semantic_2004,
	title = {Semantic {Translation} of {Simulink}/{Stateflow} {Models} to {Hybrid} {Automata} {Using} {Graph} {Transformations}},
	volume = {109},
	issn = {15710661},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1571066104052089},
	doi = {10.1016/j.entcs.2004.02.055},
	abstract = {Embedded systems are often modeled using Matlab’s Simulink and Stateﬂow (MSS), to simulate plant and controller behavior but these models lack support for formal veriﬁcation. On the other hand veriﬁcation techniques and tools do exist for models based on the notion of Hybrid Automata (HA) but there are no tools that can convert Simulink/Stateﬂow models into their semantically equivalent Hybrid Automata models. This paper describes a translation algorithm that converts a well-deﬁned subset of the MSS modeling language into an equivalent hybrid automata. The translation has been speciﬁed and implemented using a metamodel-based graph transformation tool. The translation process allows semantic interoperability between the industry-standard MSS tools and the new veriﬁcation tools developed in the research community.},
	language = {en},
	urldate = {2021-02-11},
	journal = {Electronic Notes in Theoretical Computer Science},
	author = {Agrawal, Aditya and Simon, Gyula and Karsai, Gabor},
	month = dec,
	year = {2004},
	pages = {43--56},
	file = {Agrawal et al. - 2004 - Semantic Translation of SimulinkStateflow Models .pdf:/home/matt/Zotero/storage/M4YXP5SU/Agrawal et al. - 2004 - Semantic Translation of SimulinkStateflow Models .pdf:application/pdf},
}

@incollection{sun_deductive_2018,
	address = {Cham},
	title = {Deductive {Verification} of {Hybrid} {Control} {Systems} {Modeled} in {Simulink} with {KeYmaera} {X}},
	volume = {11232},
	isbn = {978-3-030-02449-9 978-3-030-02450-5},
	url = {http://link.springer.com/10.1007/978-3-030-02450-5_6},
	abstract = {Hybrid control systems are, due to their ever-increasing complexity, more and more developed in model-driven design languages like Simulink. At the same time, they are often used in safety-critical applications like automotive or medical systems. Ensuring the correctness of Simulink models is challenging, as their semantics is only informally deﬁned. There exist some approaches to formalize the Simulink semantics, however, most of them are restricted to a discrete subset. To overcome this problem, we present an approach to map the informally deﬁned execution semantics of hybrid Simulink models into the formally well-deﬁned semantics of diﬀerential dynamic logic (dL). In doing so, we provide a formal foundation for Simulink, and we enable deductive formal veriﬁcation of hybrid Simulink models with an interactive theorem prover for hybrid systems, namely KeYmaera X. Our approach supports a large subset of Simulink, including time-discrete and timecontinuous blocks, and generates compact and comprehensible dL models fully-automatically. We show the applicability of our approach with a temperature control system and an industrial case study of a multiobject distance warner.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Formal {Methods} and {Software} {Engineering}},
	publisher = {Springer International Publishing},
	author = {Liebrenz, Timm and Herber, Paula and Glesner, Sabine},
	editor = {Sun, Jing and Sun, Meng},
	year = {2018},
	doi = {10.1007/978-3-030-02450-5_6},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {89--105},
	file = {Liebrenz et al. - 2018 - Deductive Verification of Hybrid Control Systems M.pdf:/home/matt/Zotero/storage/6BPBFN6Z/Liebrenz et al. - 2018 - Deductive Verification of Hybrid Control Systems M.pdf:application/pdf},
}

@incollection{giannakopoulou_formal_2014,
	address = {Cham},
	title = {Formal {Verification} of {Discrete}-{Time} {MATLAB}/{Simulink} {Models} {Using} {Boogie}},
	volume = {8702},
	isbn = {978-3-319-10430-0 978-3-319-10431-7},
	url = {http://link.springer.com/10.1007/978-3-319-10431-7_14},
	abstract = {Matlab/Simulink is a widely used industrial tool for the development of embedded systems. Many of these systems are safety critical, especially in automotive industries. At the same time, automatic formal veriﬁcation techniques for Simulink, in particular on model level, are rare and often suﬀer from scalability issues. In this paper, we present an automatic transformation of discrete-time Matlab/Simulink models into the intermediate veriﬁcation language Boogie. This transformation enables us to use the Boogie veriﬁcation framework and inductive invariant checking for the automatic formal veriﬁcation of Matlab/Simulink models. Additionally, veriﬁcation objectives for common error classes are generated automatically. With our approach, we provide an automatic formal veriﬁcation technique for Matlab/Simulink and the most common error classes which scales better than existing techniques in many cases. To demonstrate the practical applicability, we have applied our approach to a number of case studies from the automotive domain.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Software {Engineering} and {Formal} {Methods}},
	publisher = {Springer International Publishing},
	author = {Reicherdt, Robert and Glesner, Sabine},
	editor = {Giannakopoulou, Dimitra and Salaün, Gwen},
	year = {2014},
	doi = {10.1007/978-3-319-10431-7_14},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {190--204},
	file = {Reicherdt and Glesner - 2014 - Formal Verification of Discrete-Time MATLABSimuli.pdf:/home/matt/Zotero/storage/UCP646NW/Reicherdt and Glesner - 2014 - Formal Verification of Discrete-Time MATLABSimuli.pdf:application/pdf},
}

@incollection{hutchison_tool_2012,
	address = {Berlin, Heidelberg},
	title = {Tool {Chain} to {Support} {Automated} {Formal} {Verification} of {Avionics} {Simulink} {Designs}},
	volume = {7437},
	isbn = {978-3-642-32468-0 978-3-642-32469-7},
	url = {http://link.springer.com/10.1007/978-3-642-32469-7_6},
	abstract = {Embedded systems have become an inevitable part of control systems in many industrial domains including avionics. The nature of this domain traditionally requires the highest possible degree of system availability and integrity. While embedded systems have become extremely complex and they have been continuously replacing legacy mechanical components, the amount of defects of hardware and software has to be kept to absolute minimum to avoid casualties and material damages. Despite the above-mentioned facts, signiﬁcant improvements are still required in the validation and veriﬁcation processes accompanying embedded systems development. In this paper we report on integration of a parallel, explicit-state LTL model checker (DIVINE) and a tool for requirements-based veriﬁcation of aerospace system components (HiLiTE, a tool implemented and used by Honeywell). HiLiTE and the proposed partial toolchain use MATLAB Simulink/Stateﬂow as the primary design language. The work has been conducted within the Artemis project industrial Framework for Embedded Systems Tools (iFEST).},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Formal {Methods} for {Industrial} {Critical} {Systems}},
	publisher = {Springer Berlin Heidelberg},
	author = {Barnat, Jiri and Beran, Jan and Brim, Lubos and Kratochvíla, Tomas and Ročkai, Petr},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Stoelinga, Mariëlle and Pinger, Ralf},
	year = {2012},
	doi = {10.1007/978-3-642-32469-7_6},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {78--92},
	file = {Barnat et al. - 2012 - Tool Chain to Support Automated Formal Verificatio.pdf:/home/matt/Zotero/storage/TTHJHS7G/Barnat et al. - 2012 - Tool Chain to Support Automated Formal Verificatio.pdf:application/pdf},
}

@inproceedings{kawahara_verification_2009,
	address = {Herzeliya and Haifa, Israel},
	title = {Verification of embedded system's specification using collaborative simulation of {SysML} and simulink models},
	isbn = {978-1-4244-2967-7},
	url = {http://ieeexplore.ieee.org/document/5031716/},
	doi = {10.1109/mbse.2009.5031716},
	abstract = {The authors propose an extension of SysML which enables description of continuous-time behavior. The authors also develop its execution tool integrated on Eclipse-based platform by exploiting co-simulation of SysML and MATLAB / Simulink. To demonstrate the effectiveness of the tool and the extension to SysML in verifying speciﬁcations of an embedded system, we create a sample model and analyze its execution results by checking constraints under a test case.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {2009 {International} {Conference} on {Model}-{Based} {Systems} {Engineering}},
	publisher = {IEEE},
	author = {Kawahara, Ryo and Dotan, Dolev and Sakairi, Takashi and {Kohichi Ono} and {Hiroaki Nakamura} and Kirshin, Andrei and {Shinichi Hirose} and {Hiroshi Ishikawa}},
	month = mar,
	year = {2009},
	pages = {21--28},
	file = {Kawahara et al. - 2009 - Verification of embedded system's specification us.pdf:/home/matt/Zotero/storage/UU3WSC52/Kawahara et al. - 2009 - Verification of embedded system's specification us.pdf:application/pdf},
}

@article{zhou_semantic_2012,
	title = {Semantic {Translation} of {Simulink} {Diagrams} to {Input}/{Output} {Extended} {Finite} {Automata}},
	volume = {22},
	issn = {0924-6703, 1573-7594},
	url = {http://link.springer.com/10.1007/s10626-010-0096-1},
	doi = {10.1007/s10626-010-0096-1},
	abstract = {We develop a semantic translation approach for Simulink diagrams. Simulink is a graphical tool for representing and simulating dynamical systems. We propose a recursive approach for translating a class of Simulink diagrams to input/ output-extended finite automata (I/O-EFA). An I/O-EFA model of a Simulink diagram can be used for further analysis such as test generation and formal verification. We show that the translation approach is sound and complete: The input-stateoutput behavior of an I/O-EFA model, as defined in terms of a step-trajectory, preserves the input-state-output behavior of the corresponding Simulink diagram at each sample time (assuming the same integration method for any of the continuous blocks with dynamics).},
	language = {en},
	number = {2},
	urldate = {2021-02-11},
	journal = {Discrete Event Dynamic Systems},
	author = {Zhou, Changyan and Kumar, Ratnesh},
	month = jun,
	year = {2012},
	pages = {223--247},
	file = {Zhou and Kumar - 2012 - Semantic Translation of Simulink Diagrams to Input.pdf:/home/matt/Zotero/storage/D6TF8NFF/Zhou and Kumar - 2012 - Semantic Translation of Simulink Diagrams to Input.pdf:application/pdf},
}

@article{bouissou_operational_nodate,
	title = {An {Operational} {Semantics} for {Simulink}’s {Simulation} {Engine}},
	doi = {10.1145/2248418.2248437},
	abstract = {The industrial tool Matlab/Simulink is widely used in the design of embedded systems. The main feature of this tool is its ability to model in a common formalism the software and its physical environment. This makes it very useful for validating the design of embedded software using numerical simulation. However, the formal veriﬁcation of such models is still problematic as Simulink is a programming language for which no formal semantics exists. In this article, we present an operational semantics of a representative subset of Simulink which includes both continuous-time and discrete-time blocks. We believe that this work gives a better understanding of Simulink and it deﬁnes the foundations of a general framework to apply formal methods on Simulink’s high level descriptions of embedded systems.},
	language = {en},
	author = {Bouissou, Olivier and Chapoutot, Alexandre},
	pages = {10},
	file = {Bouissou and Chapoutot - An Operational Semantics for Simulink’s Simulation.pdf:/home/matt/Zotero/storage/R37XD4YN/Bouissou and Chapoutot - An Operational Semantics for Simulink’s Simulation.pdf:application/pdf},
}

@inproceedings{minopoli_sl2sx_2016,
	address = {Vienna Austria},
	title = {{SL2SX} {Translator}: {From} {Simulink} to {SpaceEx} {Models}},
	isbn = {978-1-4503-3955-1},
	shorttitle = {{SL2SX} {Translator}},
	url = {https://dl.acm.org/doi/10.1145/2883817.2883826},
	doi = {10.1145/2883817.2883826},
	abstract = {The tool Matlab/Simulink is a numerical simulation environment that is widely used in industry for model-based design. Numerical simulation scales well and can be applied to systems with highly complex dynamics, but it is also inherently incomplete in the sense that critical events or behavior may be overlooked. The application of formal veriﬁcation techniques to Simulink models could help to overcome this limitation. Set-based veriﬁcation tools such as SpaceEx use as underlying formalism hybrid automata, which are semantically and structurally diﬀerent from Simulink models. To address this issue, we are building the tool SL2SX for transforming a subset of the Simulink modeling language into a corresponding SpaceEx model. Our method is designed to preserve the syntactic aspects of a given Simulink diagram: the resulting SpaceEx model shows the same hierarchical structure and preserves the names of components and variables. Placeholders with the correct interface are provided for unsupported Simulink blocks, which can then be translated manually. We illustrate the tool SL2SX and the veriﬁcation of the transformed models in SpaceEx on two examples provided by the Mathworks example library.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Proceedings of the 19th {International} {Conference} on {Hybrid} {Systems}: {Computation} and {Control}},
	publisher = {ACM},
	author = {Minopoli, Stefano and Frehse, Goran},
	month = apr,
	year = {2016},
	pages = {93--98},
	file = {Minopoli and Frehse - 2016 - SL2SX Translator From Simulink to SpaceEx Models.pdf:/home/matt/Zotero/storage/AVK2VW7J/Minopoli and Frehse - 2016 - SL2SX Translator From Simulink to SpaceEx Models.pdf:application/pdf},
}

@inproceedings{zou_verifying_2013,
	address = {Montreal, QC, Canada},
	title = {Verifying {Simulink} diagrams via a {Hybrid} {Hoare} {Logic} {Prover}},
	isbn = {978-1-4799-1443-2},
	url = {http://ieeexplore.ieee.org/document/6658587/},
	doi = {10.1109/emsoft.2013.6658587},
	abstract = {Simulink is an industrial de-facto standard for building executable models of embedded systems and their environments, facilitating validation by simulation. Due to the inherent incompleteness of this form of system validation, complementing simulation by formal veriﬁcation would be desirable. A prerequisite for such an approach is a formal semantics of Simulink’s graphical models. In this paper, we show how to encode Simulink diagrams into Hybrid CSP (HCSP), a formal modelling language encoding hybrid system dynamics by means of an extension of CSP. The translation from Simulink to HCSP is fully automatic. We furthermore discuss how to utilize a Hybrid Hoare Logic Prover to verify the translated HCSP models. We demonstrate our approach on a combined scenario originating from the Chinese High-speed Train Control System at Level 3 (CTCS-3).},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {2013 {Proceedings} of the {International} {Conference} on {Embedded} {Software} ({EMSOFT})},
	publisher = {IEEE},
	author = {Zou, Liang and Zhany, Naijun and Wang, Shuling and Franzle, Martin and Qin, Shengchao},
	month = sep,
	year = {2013},
	pages = {1--10},
	file = {Zou et al. - 2013 - Verifying Simulink diagrams via a Hybrid Hoare Log.pdf:/home/matt/Zotero/storage/PJGNRA7H/Zou et al. - 2013 - Verifying Simulink diagrams via a Hybrid Hoare Log.pdf:application/pdf},
}

@article{bernardeschi_pvs-simulink_2018,
	title = {A {PVS}-{Simulink} {Integrated} {Environment} for {Model}-{Based} {Analysis} of {Cyber}-{Physical} {Systems}},
	volume = {44},
	issn = {0098-5589, 1939-3520},
	url = {https://ieeexplore.ieee.org/document/7900400/},
	doi = {10.1109/tse.2017.2694423},
	abstract = {This paper presents a methodology, with supporting tool, for formal modeling and analysis of software components in cyber-physical systems. Using our approach, developers can integrate a simulation of logic-based speciﬁcations of software components and Simulink models of continuous processes. The integrated simulation is useful to validate the characteristics of discrete system components early in the development process. The same logic-based speciﬁcations can also be formally veriﬁed using the Prototype Veriﬁcation System (PVS), to gain additional conﬁdence that the software design complies with speciﬁc safety requirements. Modeling patterns are deﬁned for generating the logic-based speciﬁcations from the more familiar automata-based formalism. The ultimate aim of this work is to facilitate the introduction of formal veriﬁcation technologies in the software development process of cyber-physical systems, which typically requires the integrated use of different formalisms and tools. A case study from the medical domain is used to illustrate the approach. A PVS model of a pacemaker is interfaced with a Simulink model of the human heart. The overall cyber-physical system is co-simulated to validate design requirements through exploration of relevant test scenarios. Formal veriﬁcation with the PVS theorem prover is demonstrated for the pacemaker model for speciﬁc safety aspects of the pacemaker design.},
	language = {en},
	number = {6},
	urldate = {2021-02-11},
	journal = {IEEE Transactions on Software Engineering},
	author = {Bernardeschi, Cinzia and Domenici, Andrea and Masci, Paolo},
	month = jun,
	year = {2018},
	pages = {512--533},
	file = {Bernardeschi et al. - 2018 - A PVS-Simulink Integrated Environment for Model-Ba.pdf:/home/matt/Zotero/storage/8D4J5ZVG/Bernardeschi et al. - 2018 - A PVS-Simulink Integrated Environment for Model-Ba.pdf:application/pdf},
}

@article{kekatos_modeling_nodate,
	title = {Modeling the {Wind} {Turbine} {Benchmark} with {PWA} {Hybrid} {Automata} ({Experience} {Report})},
	abstract = {The wind turbine benchmark is part of the ARCH benchmark repository. It entails closedloop requirements and encompasses nonlinear and hybrid dynamics. Owing its origin to industry based applications, the benchmark modeling is done with MATLAB/Simulink. Formal veriﬁcation tools, however, do not operate on simulation models but on formal models, such as hybrid automata. Particularly eﬃcient veriﬁcation algorithms are known for systems with Piecewise Aﬃne (PWA) dynamics. In this vein, we construct a PWA model of the wind turbine in the SX format, which formally describes a network of hybrid automata and can be used by several reachability tools. The model transformation follows a four-step approach with the aim of (i) adapting the Simulink model to obtain a veriﬁcation model (ii) translating the Simulink blocks to equivalent blocks in SX format, (iii) conducting compositional, syntactic hybridization to obtain a PWA approximation of the dynamics of the nonlinear blocks, and (iv) performing model validation. We also report some preliminary experiments on the subsystems (network components) of the wind turbine that we conducted with SpaceEx.},
	language = {en},
	author = {Kekatos, Nikolaos and Forets, Marcelo and Frehse, Goran},
	keywords = {⛔ No DOI found},
	pages = {15},
	file = {Kekatos et al. - Modeling the Wind Turbine Benchmark with PWA Hybri.pdf:/home/matt/Zotero/storage/QE9HGDSN/Kekatos et al. - Modeling the Wind Turbine Benchmark with PWA Hybri.pdf:application/pdf},
}

@article{oke_model-based_nodate,
	title = {Model-{Based} {Verification} for {SIMULINK} {Design}},
	language = {en},
	author = {Oke, Victor},
	keywords = {⛔ No DOI found},
	pages = {66},
	file = {Oke - Model-Based Verification for SIMULINK Design.pdf:/home/matt/Zotero/storage/HV6EUHV2/Oke - Model-Based Verification for SIMULINK Design.pdf:application/pdf},
}

@incollection{cerone_integrated_2018,
	address = {Cham},
	title = {Integrated {Simulation} and {Formal} {Verification} of a {Simple} {Autonomous} {Vehicle}},
	volume = {10729},
	isbn = {978-3-319-74780-4 978-3-319-74781-1},
	url = {http://link.springer.com/10.1007/978-3-319-74781-1_21},
	abstract = {This paper presents a proof-of-concept application of an approach to system development based on the integration of formal veriﬁcation and co-simulation. A simple autonomous vehicle has the task of reaching an assigned straight path and then follow it, and it can be controlled by varying its turning speed. The correctness of the proposed control law has been formalized and veriﬁed by interactive theorem proving with the Prototype Veriﬁcation System. Concurrently, the system has been cosimulated using the Prototype Veriﬁcation System and the MathWorks Simulink tool: The vehicle kinematics have been simulated in Simulink, whereas the controller has been modeled in the logic language of the Prototype Veriﬁcation System and simulated with the interpreter for the same language available in the theorem proving environment. With this approach, co-simulation and formal veriﬁcation corroborate each other, thus strengthening developers’ conﬁdence in their analysis.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Software {Engineering} and {Formal} {Methods}},
	publisher = {Springer International Publishing},
	author = {Domenici, Andrea and Fagiolini, Adriano and Palmieri, Maurizio},
	editor = {Cerone, Antonio and Roveri, Marco},
	year = {2018},
	doi = {10.1007/978-3-319-74781-1_21},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {300--314},
	file = {Domenici et al. - 2018 - Integrated Simulation and Formal Verification of a.pdf:/home/matt/Zotero/storage/QTYRBI7P/Domenici et al. - 2018 - Integrated Simulation and Formal Verification of a.pdf:application/pdf},
}

@article{huang_formal_2019,
	title = {Formal {Analysis} of {Hybrid}-{Dynamic} {Timing} {Behaviors} in {Cyber}-{Physical} {Systems}},
	url = {http://arxiv.org/abs/1910.14306},
	abstract = {Ensuring correctness of timed behaviors in cyberphysical systems (CPS) using closed-loop veriﬁcation is challenging due to the hybrid dynamics in both systems and environments. SIMULINK and STATEFLOW are tools for model-based design that support a variety of mechanisms for modeling and analyzing hybrid dynamics of real-time embedded systems. In this paper, we present an SMT-based approach for formal analysis of the hybriddynamic timing behaviors of CPS modeled in SIMULINK blocks and STATEFLOW states (S/S). The hierarchically interconnected S/S are ﬂattened and translated into the input language of SMT solver for formal veriﬁcation. A translation algorithm is provided to facilitate the translation. Formal veriﬁcation of timing constraints against the S/S models is reduced to the validity checking of the resulting SMT encodings. The applicability of our approach is demonstrated on an unmanned surface vessel case study.},
	language = {en},
	urldate = {2021-02-11},
	journal = {arXiv:1910.14306 [cs]},
	author = {Huang, Li and Kang, Eun-Young},
	month = oct,
	year = {2019},
	note = {arXiv: 1910.14306},
	keywords = {Computer Science - Software Engineering, ⛔ No DOI found},
	annote = {Comment: 4 pages, accepted as a work-in-progress paper in RTSS-BP2019},
	file = {Huang and Kang - 2019 - Formal Analysis of Hybrid-Dynamic Timing Behaviors.pdf:/home/matt/Zotero/storage/823MTH78/Huang and Kang - 2019 - Formal Analysis of Hybrid-Dynamic Timing Behaviors.pdf:application/pdf},
}
